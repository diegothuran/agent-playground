#!/usr/bin/env python3
"""
Script de inicializa√ß√£o r√°pida para o Agno Playground.
Este script verifica depend√™ncias e inicia o playground.
"""

import os
import sys
import subprocess

def check_python_version():
    """Verifica se a vers√£o do Python √© adequada."""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_env_file():
    """Verifica se o arquivo .env existe."""
    if not os.path.exists(".env"):
        print("‚ùå Arquivo .env n√£o encontrado")
        print("üí° Execute: cp .env.example .env")
        print("üí° Configure sua OPENAI_API_KEY no arquivo .env")
        return False
    print("‚úÖ Arquivo .env encontrado")
    return True

def check_venv():
    """Verifica se o ambiente virtual existe."""
    if not os.path.exists("venv"):
        print("‚ùå Ambiente virtual n√£o encontrado")
        print("üí° Execute: python -m venv venv")
        return False
    print("‚úÖ Ambiente virtual encontrado")
    return True

def install_dependencies():
    """Instala as depend√™ncias b√°sicas."""
    print("üì¶ Instalando depend√™ncias b√°sicas...")
    
    basic_deps = [
        "python-dotenv",
        "google-genai",
        "requests",
        "fastapi",
        "uvicorn"
    ]
    
    for dep in basic_deps:
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", dep
            ], check=True, capture_output=True)
            print(f"‚úÖ {dep} instalado")
        except subprocess.CalledProcessError:
            print(f"‚ùå Erro ao instalar {dep}")
            return False
    
    return True

def start_simple_playground():
    """Inicia um playground simplificado."""
    print("üöÄ Iniciando playground simplificado...")
    
    # C√≥digo de um playground m√≠nimo
    playground_code = '''
import os
from dotenv import load_dotenv

load_dotenv()

# Verifica se a chave do Google est√° configurada
if not os.getenv("GOOGLE_API_KEY"):
    print("‚ùå GOOGLE_API_KEY n√£o configurada no arquivo .env")
    exit(1)

try:
    from agno.agent import Agent
    from agno.models.google import Gemini
    from agno.playground import Playground
    from agno.storage.sqlite import SqliteStorage
    from agno.tools.duckduckgo import DuckDuckGoTools
    
    # Cria agente simples
    agent = Agent(
        name="Simple Assistant",
        model=Gemini(id="gemini-1.5-pro"),
        tools=[DuckDuckGoTools()],
        instructions=["Voc√™ √© um assistente √∫til e amig√°vel."],
        storage=SqliteStorage(table_name="simple_agent", db_file="storage/agents.db"),
        markdown=True,
    )
    
    # Cria playground
    playground = Playground(agents=[agent])
    
    print("‚úÖ Playground iniciado!")
    print("üåê Acesse: http://localhost:7777")
    
    playground.serve(host="localhost", port=7777, reload=True)
    
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("üí° Instale o agno: pip install agno")
except Exception as e:
    print(f"‚ùå Erro: {e}")
'''
    
    # Executa o c√≥digo do playground
    exec(playground_code)

def main():
    """Fun√ß√£o principal."""
    print("üéØ Agno Playground - Inicializa√ß√£o R√°pida")
    print("=" * 50)
    
    # Verifica√ß√µes b√°sicas
    if not check_python_version():
        return
    
    if not check_env_file():
        return
    
    # Cria diret√≥rios necess√°rios
    os.makedirs("storage", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    
    # Tenta instalar depend√™ncias b√°sicas
    print("üîÑ Verificando depend√™ncias...")
    install_dependencies()
    
    # Inicia o playground
    try:
        start_simple_playground()
    except KeyboardInterrupt:
        print("\\nüëã Playground encerrado!")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar playground: {e}")
        print("üí° Tente executar: python playground.py")

if __name__ == "__main__":
    main()
