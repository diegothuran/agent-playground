#!/usr/bin/env python3
"""
Exemplo de uso do MCP GitHub integrado ao Agno Playground

Este exemplo demonstra como usar o assistente orquestrador para interagir
com a API do GitHub atrav√©s do sistema MCP.
"""

import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent
sys.path.append(str(root_dir))

from agents.orchestrator_agent import create_orchestrator_agent


def main():
    """Exemplo principal de uso do GitHub MCP."""
    
    print("üîó Exemplo: GitHub MCP no Agno Playground")
    print("=" * 50)
    
    # Verificar se o token do GitHub est√° configurado
    github_token = os.getenv("GITHUB_TOKEN")
    if not github_token:
        print("‚ö†Ô∏è  GITHUB_TOKEN n√£o configurado.")
        print("   Para usar a API do GitHub, configure:")
        print("   export GITHUB_TOKEN=seu_token_aqui")
        print("   ou adicione ao arquivo .env")
        print()
    
    # Criar o assistente orquestrador
    print("ü§ñ Criando assistente orquestrador...")
    assistant = create_orchestrator_agent()
    
    # Exemplos de perguntas que usar√£o o GitHub MCP automaticamente
    examples = [
        "Busque reposit√≥rios Python populares sobre machine learning",
        "Me mostre informa√ß√µes sobre o reposit√≥rio facebook/react",
        "Quais s√£o as issues abertas no reposit√≥rio microsoft/vscode?",
        "Me d√™ informa√ß√µes sobre o usu√°rio GitHub 'torvalds'",
        "Encontre reposit√≥rios JavaScript para desenvolvimento de APIs"
    ]
    
    print("\nüìã Exemplos de perguntas que usam GitHub MCP:")
    for i, example in enumerate(examples, 1):
        print(f"{i}. {example}")
    
    print("\n" + "=" * 50)
    print("üí° Dica: O assistente escolher√° automaticamente as ferramentas GitHub")
    print("    quando detectar perguntas sobre reposit√≥rios, c√≥digo, ou desenvolvedores.")
    
    # Modo interativo
    print("\nüéØ Modo Interativo (digite 'quit' para sair):")
    while True:
        try:
            question = input("\n‚ùì Sua pergunta: ").strip()
            
            if question.lower() in ['quit', 'exit', 'sair']:
                print("üëã At√© logo!")
                break
            
            if not question:
                continue
            
            print("\nü§ñ Assistente:")
            print("-" * 30)
            
            # O assistente ir√° automaticamente escolher se usar GitHub MCP
            # baseado no conte√∫do da pergunta
            response = assistant.run(question)
            print(response.content)
            
        except KeyboardInterrupt:
            print("\n\nüëã At√© logo!")
            break
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")


if __name__ == "__main__":
    main()
