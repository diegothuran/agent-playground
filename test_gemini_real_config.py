#!/usr/bin/env python3
"""
Teste para verificar configura√ß√£o real do Gemini
"""

import os
import sys
sys.path.append('/home/diego/Documentos/RA/play')

# Configurar vari√°veis de ambiente antes de qualquer importa√ß√£o
os.environ["GOOGLE_GENAI_MAX_REMOTE_CALLS"] = "3"
os.environ["GENAI_AFC_MAX_REMOTE_CALLS"] = "3"
os.environ["ANTHROPIC_FUNCTION_CALLING_MAX_REMOTE_CALLS"] = "3"

from app.config.gemini_simple import create_ultra_fast_gemini

def test_gemini_config():
    """Testa a configura√ß√£o real do Gemini."""
    
    print("=== TESTE DE CONFIGURA√á√ÉO GEMINI ===")
    print(f"Vari√°veis de ambiente:")
    print(f"GOOGLE_GENAI_MAX_REMOTE_CALLS: {os.environ.get('GOOGLE_GENAI_MAX_REMOTE_CALLS')}")
    print(f"GENAI_AFC_MAX_REMOTE_CALLS: {os.environ.get('GENAI_AFC_MAX_REMOTE_CALLS')}")
    
    try:
        # Criar inst√¢ncia do modelo
        model = create_ultra_fast_gemini()
        print(f"\n‚úÖ Modelo criado com sucesso:")
        print(f"  - ID: {getattr(model, 'id', 'N/A')}")
        print(f"  - Temperature: {getattr(model, 'temperature', 'N/A')}")
        print(f"  - Max tokens: {getattr(model, 'max_output_tokens', 'N/A')}")
        
        # Verificar todos os atributos dispon√≠veis
        print(f"\nüìã Atributos do modelo:")
        for attr in dir(model):
            if not attr.startswith('_') and not callable(getattr(model, attr)):
                value = getattr(model, attr)
                print(f"  - {attr}: {value}")
        
        # Tentar verificar configura√ß√£o interna
        if hasattr(model, '_client'):
            print(f"\nüîç Cliente interno encontrado:")
            client = getattr(model, '_client')
            for attr in dir(client):
                if 'afc' in attr.lower() or 'remote' in attr.lower():
                    print(f"  - {attr}: {getattr(client, attr, 'N/A')}")
                    
        return model
        
    except Exception as e:
        print(f"‚ùå Erro ao criar modelo: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_simple_request():
    """Testa uma requisi√ß√£o simples."""
    
    print("\n=== TESTE DE REQUISI√á√ÉO ===")
    model = create_ultra_fast_gemini()
    
    if model:
        try:
            # Verificar m√©todos dispon√≠veis
            print(f"M√©todos dispon√≠veis:")
            methods = [method for method in dir(model) if not method.startswith('_') and callable(getattr(model, method))]
            for method in methods[:10]:  # Mostra s√≥ os primeiros 10
                print(f"  - {method}")
            
            # Tentar o m√©todo correto
            if hasattr(model, 'run'):
                response = model.run("Responda apenas 'OK' se voc√™ est√° funcionando.")
                print(f"‚úÖ Resposta recebida: {response}")
            elif hasattr(model, 'invoke'):
                response = model.invoke("Responda apenas 'OK' se voc√™ est√° funcionando.")
                print(f"‚úÖ Resposta recebida: {response}")
            else:
                print("‚ùå N√£o encontrei m√©todo para fazer requisi√ß√£o")
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    test_gemini_config()
    test_simple_request()
